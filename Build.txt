Build Instructions for Repository_GUI.sln
==================================================
1. Right-Click on Repository_GUI.sln --> Properties
2. In Start Up project tab, select Multiple start up project.
3. Select 'Start' for 'GUI' and 'ServerPrototype'
4. Select 'Translater' project and set Configuartion Type as 'Dynamic Library'
5. Set other project as 'Static library'

Build Instructions for Translater as standalone executable
=======================================
1. Right-Click on Translater and select Set as StartUp Project
2. Set Translater to build as executable
   a. Translater > Properties > General > Project Defaults > Configuration Type > Application (.exe)
2. Set other project as static library
3. Right-Click on Translater and select Build

Build Instructions for FileSystem as standalone executable
=======================================
1. Right-Click on FileSystem and select Set as StartUp Project
2. Set FileSystem to build as executable
   a. FileSystem > Properties > General > Project Defaults > Configuration Type > Application (.exe)
   b. FileSystem > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_FILESYSTEM;
2. Set other project as static library
3. Right-Click on FileSystem and select Build

Build Instructions for Message as standalone executable
=======================================
1. Right-Click on Message and select Set as StartUp Project
2. Set Message to build as executable
   a. Message > Properties > General > Project Defaults > Configuration Type > Application (.exe)
   b. Message > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_MESSAGE;
2. Set other project as static library
3. Right-Click on Message and select Build

Build Instructions for MsgPassingComm as standalone executable
=======================================
1. Right-Click on MsgPassingComm and select Set as StartUp Project
2. Set MsgPassingComm to build as executable
   a. MsgPassingComm > Properties > General > Project Defaults > Configuration Type > Application (.exe)
   b. MsgPassingComm > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_COMM;
2. Set other project as static library
3. Right-Click on MsgPassingComm and select Build


Build Instructions for Sockets as standalone executable
=======================================
1. Right-Click on Sockets and select Set as StartUp Project
2. Set Sockets to build as executable
   a. Sockets > Properties > General > Project Defaults > Configuration Type > Application (.exe)
   b. Sockets > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_SOCKETS;
2. Set other project as static library
3. Right-Click on Sockets and select Build


Build Instructions for Utilities as standalone executable
=============================================================
1. Note that All of the Utilities in the solution's Utilities folder provide all their functionality
   via their header files.
2. For that reason Projects that use them don't have to build them, but simply include their header files.
3. Right-Click on Utilities and select Set as StartUp Project
4. Utilities > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_UTILITIES;
5. Right-Click on Utilities and select Build

Build Instructions for DbCore prototype(Executive)
==================================================
1. Right-Click on Executive and select Set as StartUp Project
2. Set other project as static library
3. Right-Click on Executive and select Build

Build Instructions for DbCore as standalone executable
=======================================
1. Right-Click on DbCore and select Set as StartUp Project
2. Set DbCore to build as executable
   a. DbCore > Properties > General > Project Defaults > Configuration Type > Application (.exe)
   b. DbCore > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_DBCORE;
2. Set other project as static library
3. Right-Click on DbCore and select Build

Build Instructions for DateTime as standalone executable
=======================================
1. Right-Click on DateTime and select Set as StartUp Project
2. Set DateTime to build as executable
   a. DateTime > Properties > General > Project Defaults > Configuration Type > Application (.exe)
   b. DateTime > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_DATETIME;
2. Set other project as static library
3. Right-Click on DateTime and select Build

Build Instructions for Test as standalone executable
=======================================
1. Right-Click on Test and select Set as StartUp Project
2. Set Test to build as executable
   a. Test > Properties > General > Project Defaults > Configuration Type > Application (.exe)
   b. Test > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_TESTCASES;
2. Set other project as static library
3. Right-Click on Test and select Build

Build Instructions for XMLStorage as standalone executable
=======================================
1. Right-Click on XMLStorage and select Set as StartUp Project
2. Set DbCore to build as executable
   a. XMLStorage > Properties > General > Project Defaults > Configuration Type > Application (.exe)
   b. XMLStorage > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_XMLSTORAGE;
2. Set other project as static library
3. Right-Click on XMLStorage and select Build

Build Instructions for TestUtilities as standalone executable
=============================================================
1. Note that All of the Utilities in the solution's Utilities folder provide all their functionality
   via their header files.
2. For that reason Projects that use them don't have to build them, but simply include their header files.
3. Right-Click on TestUtilities and select Set as StartUp Project
4. TestUtilities > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_TESTUTILITIES;
5. Right-Click on TestUtilities and select Build

Build Instructions for StringUtilities as standalone executable
=============================================================
1. Note that All of the Utilities in the solution's Utilities folder provide all their functionality
   via their header files.
2. For that reason Projects that use them don't have to build them, but simply include their header files.
3. Right-Click on StringUtilities and select Set as StartUp Project
4. StringUtilities > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_STRINGUTILITIES;
5. Right-Click on StringUtilities and select Build

Build Instructions for Browse as standalone executable
=============================================================
1. Note that All of the Utilities in the solution's Utilities folder provide all their functionality
   via their header files.
2. For that reason Projects that use them don't have to build them, but simply include their header files.
3. Right-Click on Browse and select Set as StartUp Project
4. Browse > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_BROWSE;
5. Right-Click on BROWSE and select Build

Build Instructions for Version as standalone executable
=============================================================
1. Note that All of the Utilities in the solution's Utilities folder provide all their functionality
   via their header files.
2. For that reason Projects that use them don't have to build them, but simply include their header files.
3. Right-Click on Version and select Set as StartUp Project
4. Version > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_VERSION;
5. Right-Click on Version and select Build

Build Instructions for CheckIn as standalone executable
=============================================================
1. Note that All of the Utilities in the solution's Utilities folder provide all their functionality
   via their header files.
2. For that reason Projects that use them don't have to build them, but simply include their header files.
3. Right-Click on CheckIn and select Set as StartUp Project
4. CheckIn > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_CHECKIN;
5. Right-Click on CheckIn and select Build

Build Instructions for CheckOut as standalone executable
=============================================================
1. Note that All of the Utilities in the solution's Utilities folder provide all their functionality
   via their header files.
2. For that reason Projects that use them don't have to build them, but simply include their header files.
3. Right-Click on CheckOut and select Set as StartUp Project
4. CheckOut > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_CHECKOUT;
5. Right-Click on CheckOut and select Build

Build Instructions for RepositoryCore as standalone executable
=============================================================
1. Note that All of the Utilities in the solution's Utilities folder provide all their functionality
   via their header files.
2. For that reason Projects that use them don't have to build them, but simply include their header files.
3. Right-Click on RepositoryCore and select Set as StartUp Project
4. RepositoryCore > Properties > C/C++ > Preprocessor > Preprocessor Definitions > TEST_REPCORE;
5. Right-Click on RepositoryCore and select Build






